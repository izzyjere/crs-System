// <auto-generated />
using System;
using CRS.Web;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRS.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220925022305_FuckMig")]
    partial class FuckMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CRS.Shared.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Offense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoliceStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuspectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SuspectId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("CRS.Shared.Judgement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("CertifyingOfficer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Court")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("JudgedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("Judgements");
                });

            modelBuilder.Entity("CRS.Shared.Suspect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Complexion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EyeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suspects");
                });

            modelBuilder.Entity("CRS.Shared.Case", b =>
                {
                    b.HasOne("CRS.Shared.Suspect", "Suspect")
                        .WithMany("Cases")
                        .HasForeignKey("SuspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("CRS.Shared.Judgement", b =>
                {
                    b.HasOne("CRS.Shared.Case", "Case")
                        .WithMany("Judgements")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("CRS.Shared.Suspect", b =>
                {
                    b.OwnsMany("CRS.Shared.Biometric", "Biometrics", b1 =>
                        {
                            b1.Property<int>("SuspectId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<byte[]>("Data")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.Property<Guid>("Guid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("OwnerId")
                                .HasColumnType("int");

                            b1.HasKey("SuspectId", "Id");

                            b1.ToTable("SuspectBiometrics", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SuspectId");
                        });

                    b.Navigation("Biometrics");
                });

            modelBuilder.Entity("CRS.Shared.Case", b =>
                {
                    b.Navigation("Judgements");
                });

            modelBuilder.Entity("CRS.Shared.Suspect", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
