@page "/"
@using CRS.Shared
@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@inject DatabaseContext db

<MudTable Bordered Striped Hover Items="@DataSource">
    <ToolBarContent>
        <MudText Color="Color.Primary" Typo="Typo.h5">Suspects</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>NRC Number</MudTh>
        <MudTh>Registered On</MudTh>
        <MudTh>Date of Birth</MudTh>
        <MudTh>No. of Cases</MudTh>
        <MudTh>Gender</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.PersonalDetails.FullName</MudTd>
        <MudTd>@context.PersonalDetails.NRC</MudTd>
        <MudTd>@context.PersonalDetails.DateOfRegistration.ToString("dd MMM yyyy H:mm")</MudTd>
        <MudTd>@context.PersonalDetails.DateOfBirth.ToString("dd MMM yyyy")</MudTd>
        <MudTd>@context.Suspect.Cases?.Count</MudTd>
        <MudTd>@context.PersonalDetails.Gender</MudTd>
        <MudTd>
            <MudButton OnClick="()=>ShowDetails(context)" Color="Color.Primary">View Details</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@code
{
    List<SuspectResponse> DataSource = new();
    private string searchString1 = "";
    List<Citizen> citizens = new();
    List<Suspect> suspects = new();
    protected override async void OnInitialized()
    {
        suspects = db.Suspects.Include(s => s.Cases).ThenInclude(c => c.Judgements).ToList();
        var httpClient = new HttpClient();
        try
        {
            var response = await httpClient.GetAsync("https://localhost:5001/api/citizens");
            if (response.IsSuccessStatusCode)
            {
                citizens = await response.Content.ReadFromJsonAsync<List<Citizen>>();
            }
            if (citizens !=null)
            {
                DataSource = GetSuspects();
                StateHasChanged();
            }

        }
        catch (Exception)
        {
            snackbar.Add("National registration api must be down or off.", Severity.Error);
        }

    }
    [Inject] ISnackbar snackbar{ get; set; }
    async void ShowDetails(SuspectResponse model)
    {
        var options = new DialogOptions { MaxWidth= MaxWidth.Medium, FullWidth=true, Position=DialogPosition.TopCenter };
        var dialog = dialogService.Show<DetailsModal>("Details", new DialogParameters { ["Model"]=model }, options);
        await dialog.Result;
    }
    public List<SuspectResponse> GetSuspects()
    {
        var list = new List<SuspectResponse>();
        foreach (var suspect in suspects)
        {
            var citizen = citizens.Single(c => c.PersonalDetails.NRC == suspect.NRC);
            if (citizen != null)
            {
                list.Add(new SuspectResponse { Suspect = suspect, PersonalDetails = citizen.PersonalDetails });
            }
        }
        return list;
    }
}